library(stringr)
install.packages("stringr")
install.packages("XML")
install.packages("maps")
library(stringr)
library(SML)
library(XML)
library(maps)
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/
List_of_World_Heritage_in_Danger",encoding = "UTF-8")
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/
List_of_World_Heritage_in_Danger",
encoding = "UTF-8")
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/
List_of_World_Heritage_in_Danger", encoding = "UTF-8")
> heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- htmlParse("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- readHTMLTable("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", stringsAsFactors = FALSE)
View(tables)
View(tables)
library(stringr)
library(XML)
library(maps)
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
library(stringr)
library(maps)
install.packages(rvest)
install.packages("rvest")
library(stringr)
library(maps)
library(rvest)
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- html_table(heritage_parsed, fill = TRUE
View(heritage_parsed)
View(tables)
View(heritage_parsed)
danger_table <- danger_table <- tables[[2]]
library(XML)
danger_table <- danger_table <- tables[[2]]
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
library(rvest)
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
View(heritage_parsed)
tables <- html_table(heritage_parsed, fill = TRUE)
danger_table <- danger_table <- tables[[2]]
names(danger_table)
tables <- html_table(heritage_parsed, fill = TRUE)
library(stringr)
library(XML)
library(maps)
library(rvest)
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- html_table(heritage_parsed, fill = TRUE)
View(tables)
library(stringr)
library(XML)
library(maps)
library(rvest)
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- html_table(heritage_parsed, fill = TRUE)
View(tables)
View(tables)
source("~/.active-rstudio-document")
library(stringr)
library(XML)
library(maps)
library(rvest)
# Read a websites html and extract all tables into the 'tables' object
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- html_table(heritage_parsed, fill = TRUE)
# After looking through 'tables' we found table 2 to be the one we want. Save that table to an object
danger_table <- danger_table <- tables[[2]]
#print table headers
names(danger_table)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
dim(danger_table)
head(danger_table)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
head(danger_table)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
dim(danger_table)
head(danger_table)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
table(danger_table$crit)
warnings()
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
source("~/Desktop/1.1 World Heritage Sites in Danger.R", echo=TRUE)
x = 301380995
set.seed(x)
rnorm(1)
x <- 301380995
set.seed(x)
rnorm(1)
x <- 301380995
set.seed(x)
rnorm(1)
x <- 301380995
set.seed(x)
rnorm(1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
x = 301380995
set.seed(x)
rnorm(1)
x = 301380995
set.seed(x)
rnorm(1)
x = 301380995
set.seed(x)
rnorm(1)
x = 301380995
set.seed(x)
rnorm(1)
x = 301380995
set.seed(x)
rnorm(1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
knitr::stitch('myscript.r')
knitr::stitch('Assignment00.r')
source("~/Desktop/Assignment00.r", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
lib()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(knitr)
library(tmap)
library(tidyverse)
install.packages("tidyverse")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("xml2")
install.packages("sf")
library(sf)
install.packages("tmap")
library(tmap)
library(tidyverse)
library(sf)
library(tmap)
library(knitr)
Countries <- read.csv("http://www.sfu.ca/~sweldon/Countries")
temp <- Countries %>%
select(country, lifexp)
kable(temp, caption = "Life Expectancy", digits=1, col.names = c("Country", "Life Expectancy"))
temp$country <- factor(temp$country, levels = temp$country)
temp$country <- fct_reorder(temp$country, temp$lifexp, max)
temp$lifexp <- round(temp$lifexp, digits=1)
temp$avg <- ifelse(temp$lifexp < median(temp$lifexp, na.rm=TRUE), "below", "above")
temp <- na.omit(temp)
ggplot(temp, aes(x=country, y=lifexp, label = lifexp)) +
geom_bar(stat='identity', aes(fill=avg), width=.6) +
geom_text(aes(label=lifexp), hjust=0, size=2.5) +
scale_fill_manual(name = "Life Expectancy",
labels = c("Above Average", "Below Average"),
values = c("above"="green", "below" = "red")) +
coord_flip() +
labs(title="Life Expectancy by Country",
x="",
y="Life Expectancy") +
theme_bw() +
theme(panel.border=element_blank())
tmap_mode("view")
data(World)
World <- World %>%
relocate(iso_a3, .after = sovereignt)
World$life_exp <- round(World$life_exp, digits=1)
tm_shape(World) +
tm_borders() +
tm_fill("life_exp",
title = "Life Expectancy",
popup.vars = c("name", "life_exp")) +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
provinces <- sf::read_sf("/Users/sweldon/Downloads/lpr_000b16a_e/lpr_000b16a_e.shp")
library(tidyverse)
library(sf)
library(tmap)
library(knitr)
Countries <- read.csv("http://www.sfu.ca/~sweldon/Countries")
temp <- Countries %>%
select(country, lifexp)
kable(temp, caption = "Life Expectancy", digits=1, col.names = c("Country", "Life Expectancy"))
temp$country <- factor(temp$country, levels = temp$country)
temp$country <- fct_reorder(temp$country, temp$lifexp, max)
temp$lifexp <- round(temp$lifexp, digits=1)
temp$avg <- ifelse(temp$lifexp < median(temp$lifexp, na.rm=TRUE), "below", "above")
temp <- na.omit(temp)
ggplot(temp, aes(x=country, y=lifexp, label = lifexp)) +
geom_bar(stat='identity', aes(fill=avg), width=.6) +
geom_text(aes(label=lifexp), hjust=0, size=2.5) +
scale_fill_manual(name = "Life Expectancy",
labels = c("Above Average", "Below Average"),
values = c("above"="green", "below" = "red")) +
coord_flip() +
labs(title="Life Expectancy by Country",
x="",
y="Life Expectancy") +
theme_bw() +
theme(panel.border=element_blank())
tmap_mode("view")
data(World)
World <- World %>%
relocate(iso_a3, .after = sovereignt)
World$life_exp <- round(World$life_exp, digits=1)
tm_shape(World) +
tm_borders() +
tm_fill("life_exp",
title = "Life Expectancy",
popup.vars = c("name", "life_exp")) +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
provinces <- sf::read_sf("/Users/timonglaesser/Downloads/lpr_000b16a_e/lpr_000b16a_e.shp")
provinces <- sf::st_simplify(provinces, dTolerance = 1000, preserveTopology = FALSE)
data(World)
tm_shape(World) +
tm_borders() +
tm_fill("life_exp")
tm_shape(World) +
tm_borders() +
tm_fill("life_exp",
title = "Life Expectancy",
popup.vars = c("name", "life_exp")) +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
country <- c("Brazil", "Germany", "Italy", "Argentina", "France", "Uruguay", "England", "Spain", "Netherlands", "Hungary", "Czechia", "Sweden", "Croatia", "Poland", "Austria", "Portugal",
"Belgium", "United States", "Chile", "Turkey", "Serbia", "Russia", "Bulgaria", "South Korea", "Morocco")
iso3 <- c("BRA", "DEU", "ITA", "ARG", "FRA", "URY", "GBR", "ESP", "NLD", "HUN", "CZE", "SWE", "HRV", "POL", "AUT", "PRT", "BEL", "USA", "CHL", "TUR", "SRB", "RUS", "BGR", "KOR", "MAR")
top4 <- c(11, 13, 8, 6, 7, 5, 3, 2, 5, 2, 2, 4, 3, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1,1) # Times country has finished in top 4
championships <- c(5, 4, 4, 3, 2, 2, 1, 1, rep(0, 17)) # Times country has won
wc <- data.frame(iso3, championships, top4)
World <- dplyr::left_join(World, wc, by = c("iso_a3" = "iso3"))
tm_shape(World) +
tm_borders() +
tm_fill ("championships",
title = "World Cup Championships") +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
World <- World %>%
dplyr::mutate(championships = replace_na(championships, 0),
championships = as.integer(championships)) %>%
relocate(iso_a3, .after=sovereignt)
my.pal = c("lightgrey", "yellow", "orange", "purple", "red", "dodgerblue")
tm_shape(World) +
tm_borders() +
tm_fill ("championships",
title = "World Cup Championships",
palette = my.pal) +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
World <- World %>%
dplyr::mutate(top4 = replace_na(top4, 0),
top4 = as.integer(top4))
tm_shape(World) +
tm_borders() +
tm_fill ("top4",
title = "Number of Top 4 Finishes",
breaks = c(0,1,2,3,4, 8, 14),
palette = "YlOrBr") +
tm_view(set.view=c(35,14,2)) +
tm_basemap("Esri.WorldTopoMap")
shiny::runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
# Merge census data and drive into new df
census_data_d <- merge(census_data, drive)
# Select the required columns
clean_cen <- census_data %>%
select(GeoUID, `Region Name`, geometry, y21_transit, y21_walk, `21_bike`, walk_score, bike_score)
# Round up the walk and bike scores
clean_cen$walk_score <- round(clean_cen$walk_score, digits = 0)
shiny::runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
shiny::runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
shiny::runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
shiny::runApp('Desktop/SFU Courses/SDA 490/SDA-490-Capstone/presentation')
shiny::runApp('Desktop/Vancouver-Walkability-Analysis')
shinyApp(ui, server)
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
data
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
ensus_data %>%
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(weight = 1,
color = ~pal(census_data$relative_crash_count),
stroke = FALSE,
fillOpacity = .75,
label = ~census_data$relative_crash_count)
census_data %>%
leaflet() %>%
addProviderTiles("CartoDB") %>%
addPolygons(weight = 1,
color = ~pal(census_data$relative_crash_count),
stroke = FALSE,
fillOpacity = .75,
label = ~census_data$relative_crash_count)
census_data %>%
leaflet() %>%
addProviderTiles("CartoDB")
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/shinytesting.R')
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/Vancouver-Walkability-Analysis')
##select just traffic related incidents
crash <- crime %>%
select(TYPE, YEAR, MONTH, NEIGHBOURHOOD, x, y) %>%
filter(TYPE %in% c("Vehicle Collision or Pedestrian Struck (with Injury)", "Vehicle Collision or Pedestrian Struck (with Fatality)"))
##get a count
CollisionCount <- crash %>%
group_by(YEAR) %>%
count(TYPE)
runApp('Desktop/Vancouver-Walkability-Analysis')
runApp('Desktop/Vancouver-Walkability-Analysis')
